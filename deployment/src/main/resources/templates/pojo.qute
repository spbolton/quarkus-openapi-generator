{#if withXml}
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
{#else}
import java.lang.reflect.Type;

import com.fasterxml.jackson.annotation.JsonProperty;
{/if}

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.immutables.value.Value;
import io.vertx.codegen.annotations.Nullable;

{#if withXml}
@XmlAccessorType(XmlAccessType.FIELD)
{#if m.hasVars}@XmlType(name = "{m.classname}", propOrder =
    { {#for var in m.vars}"{var.name}"{#if var_hasNext}, {/if}{/for}
}){#else}
@XmlType(name = "{m.classname}")
{/if}
{#if !m.parent || m.parent.isEmpty}@XmlRootElement(name = "{m.classname}"){/if}
{#else}
@JsonIgnoreProperties(ignoreUnknown = true)
{/if}
{#if m.description}
/**
  * {m.description}
 **/
{/if}
{#include additionalModelTypeAnnotations.qute m=m/}
@Value.Immutable
@Value.Style(
        typeAbstract = "Abstract*",
        typeImmutable = "*",
        visibility = Value.Style.ImplementationVisibility.PUBLIC)
@JsonSerialize
@JsonDeserialize(builder = {m.classname}.Builder.class)
public interface Abstract{m.classname} {#if m.parent}extends Abstract{m.parent}{/if}{#if m.serializableModel} implements Serializable{/if} {

    {#for v in m.vars}
    {#if !v.deprecated || openapi:genDeprecatedModelAttr(package, m.classname, codegen)}
    {#if v.isEnum}
    {#if v.isContainer && v.mostInnerItems}
    {#include enumClass.qute e=v/}
    {#else if !v.isContainer}

    {#include enumClass.qute e=v/}{/if}
    {/if}
    {#if withXml}
    @XmlElement(name="{v.basename}"{#if v.required}, required = {v.required}{/if})
    {/if}
    {#if m.description}
    /**
      * {m.description}
      {#if v.minimum}
      * minimum: {v.minimum}
      {/if}
      {#if v.maximum}
      * maximum: {v.maximum}
      {/if}
     **/
    {/if}
    {#if v.useBeanValidation}{#include beanValidation.qute p=v/}{/if}
    {#if v.isContainer}
    {#if !v.required && !v.defaultValue}@Nullable{/if}
    {#if v.defaultValue}default {/if}{v.datatypeWithEnum} {v.name}(){#if v.defaultValue} { return {v.defaultValue}; };{#else};{/if}
    {#else}
    {#if !v.required && !v.defaultValue}@Nullable{/if}
    {#if v.defaultValue}default {/if}{v.datatypeWithEnum} {v.name}(){#if v.defaultValue} { return {v.defaultValue}; };{#else};{/if}
    {/if}
    {/if}
    {/for}
}